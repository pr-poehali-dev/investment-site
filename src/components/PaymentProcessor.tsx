import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import Icon from '@/components/ui/icon';

interface PaymentProcessorProps {
  selectedPlan: {
    id: string;
    name: string;
    minAmount: number;
    maxAmount: number;
    dailyReturn: number;
    duration: number;
    color: string;
  };
  amount: number;
  onClose?: () => void;
  onSuccess?: (paymentData: any) => void;
}

interface PaymentMethod {
  id: string;
  name: string;
  icon: string;
  description: string;
  handler: string;
  testCard?: string;
}

export default function PaymentProcessor({ selectedPlan, amount, onClose, onSuccess }: PaymentProcessorProps) {
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('yookassa');
  const [contactInfo, setContactInfo] = useState({
    email: '',
    phone: '',
    name: ''
  });
  const [isProcessing, setIsProcessing] = useState(false);
  const [paymentStep, setPaymentStep] = useState<'form' | 'processing' | 'payment' | 'success'>('form');
  const [paymentUrl, setPaymentUrl] = useState('');
  const { toast } = useToast();

  const paymentMethods: PaymentMethod[] = [
    {
      id: 'yookassa',
      name: '–ÆKassa',
      icon: 'CreditCard',
      description: '–ö–∞—Ä—Ç—ã, Apple Pay, Google Pay',
      handler: 'yookassa',
      testCard: '4111 1111 1111 1111'
    },
    {
      id: 'sberbank',
      name: '–°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω',
      icon: 'Building2',
      description: '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω',
      handler: 'sberbank'
    },
    {
      id: 'tinkoff',
      name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ',
      icon: 'Wallet',
      description: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
      handler: 'tinkoff'
    },
    {
      id: 'paypal',
      name: 'PayPal',
      icon: 'Globe',
      description: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
      handler: 'paypal'
    }
  ];

  const calculateReturns = () => {
    const dailyProfit = (amount * selectedPlan.dailyReturn) / 100;
    const totalProfit = dailyProfit * selectedPlan.duration;
    return {
      daily: dailyProfit,
      total: totalProfit,
      final: amount + totalProfit
    };
  };

  const returns = calculateReturns();

  const processPayment = async () => {
    if (!contactInfo.email || !contactInfo.phone || !contactInfo.name) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    setPaymentStep('processing');

    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      await new Promise(resolve => setTimeout(resolve, 2000));

      const selectedMethod = paymentMethods.find(m => m.id === selectedPaymentMethod);
      
      if (selectedMethod?.handler === 'yookassa') {
        // –°–∏–º—É–ª—è—Ü–∏—è –ÆKassa
        const mockPaymentUrl = `https://yoomoney.ru/checkout/payments/v2/contract?orderId=test_${Date.now()}`;
        setPaymentUrl(mockPaymentUrl);
        setPaymentStep('payment');
        
        // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          setPaymentStep('success');
          toast({
            title: "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! üéâ",
            description: `–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è ${amount.toLocaleString()} ‚ÇΩ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –í—ã–ø–ª–∞—Ç—ã –Ω–∞—á–Ω—É—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.`,
          });
          onSuccess?.({
            amount,
            plan: selectedPlan,
            paymentMethod: selectedMethod,
            transactionId: `tx_${Date.now()}`
          });
        }, 5000);
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        setPaymentStep('success');
        toast({
          title: "–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
          description: `–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ ${selectedMethod?.name}`,
        });
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
        variant: "destructive"
      });
      setPaymentStep('form');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleMethodSelect = (methodId: string) => {
    setSelectedPaymentMethod(methodId);
  };

  if (paymentStep === 'processing') {
    return (
      <div className="max-w-2xl mx-auto p-8">
        <Card>
          <CardContent className="p-8 text-center">
            <div className="mb-6">
              <Icon name="Loader2" size={48} className="mx-auto text-indigo-600 animate-spin" />
            </div>
            <h3 className="text-xl font-semibold mb-2">–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...</h3>
            <p className="text-gray-600">–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (paymentStep === 'payment') {
    return (
      <div className="max-w-4xl mx-auto p-8">
        <Card>
          <CardHeader className="bg-gradient-to-r from-indigo-500 to-emerald-500 text-white">
            <CardTitle className="text-2xl">–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa</CardTitle>
            <CardDescription className="text-indigo-100">
              –°—É–º–º–∞: {amount.toLocaleString()} ‚ÇΩ | –ü–ª–∞–Ω: {selectedPlan.name}
            </CardDescription>
          </CardHeader>
          <CardContent className="p-8">
            <div className="text-center space-y-6">
              <div className="p-6 bg-blue-50 rounded-lg">
                <Icon name="CreditCard" size={48} className="mx-auto text-blue-600 mb-4" />
                <h3 className="text-lg font-semibold mb-2">–î–µ–º–æ-—Ä–µ–∂–∏–º –æ–ø–ª–∞—Ç—ã</h3>
                <p className="text-gray-600 mb-4">
                  –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞ –ÆKassa
                </p>
                <div className="bg-white p-4 rounded border-2 border-dashed border-gray-300">
                  <p className="text-sm text-gray-500 mb-2">–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞:</p>
                  <code className="text-lg font-mono">4111 1111 1111 1111</code>
                  <p className="text-xs text-gray-400 mt-2">CVV: 123, –°—Ä–æ–∫: 12/25</p>
                </div>
              </div>
              
              <div className="flex items-center justify-center space-x-2 text-green-600">
                <Icon name="Loader2" size={20} className="animate-spin" />
                <span>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...</span>
              </div>
              
              <p className="text-sm text-gray-500">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (paymentStep === 'success') {
    return (
      <div className="max-w-2xl mx-auto p-8">
        <Card>
          <CardContent className="p-8 text-center">
            <div className="mb-6">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto">
                <Icon name="Check" size={32} className="text-green-600" />
              </div>
            </div>
            <h3 className="text-2xl font-bold text-green-600 mb-2">–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</h3>
            <p className="text-gray-600 mb-6">
              –í–∞—à–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Ä–∞–∑–º–µ—Ä–µ {amount.toLocaleString()} ‚ÇΩ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞
            </p>
            
            <div className="bg-gray-50 rounded-lg p-4 mb-6">
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>–ü–ª–∞–Ω:</span>
                  <span className="font-medium">{selectedPlan.name}</span>
                </div>
                <div className="flex justify-between">
                  <span>–°—É–º–º–∞:</span>
                  <span className="font-medium">{amount.toLocaleString()} ‚ÇΩ</span>
                </div>
                <div className="flex justify-between">
                  <span>–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                  <span className="font-medium text-green-600">+{returns.total.toFixed(0)} ‚ÇΩ</span>
                </div>
              </div>
            </div>
            
            <div className="space-y-3">
              <Button 
                onClick={onClose}
                className="w-full"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </Button>
              <p className="text-xs text-gray-500">
                –í—ã–ø–ª–∞—Ç—ã –Ω–∞—á–Ω—É—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <Card className="overflow-hidden">
        <CardHeader className="bg-gradient-to-r from-indigo-500 to-emerald-500 text-white">
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–ª–∞—Ç–∞</CardTitle>
              <CardDescription className="text-indigo-100">
                –ü–ª–∞–Ω: {selectedPlan.name} | –°—É–º–º–∞: {amount.toLocaleString()} ‚ÇΩ
              </CardDescription>
            </div>
            {onClose && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={onClose}
                className="text-white hover:bg-white/20"
              >
                <Icon name="X" size={20} />
              </Button>
            )}
          </div>
        </CardHeader>

        <CardContent className="p-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –§–æ—Ä–º–∞ */}
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold mb-4">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h3>
                <div className="space-y-3">
                  {paymentMethods.map((method) => (
                    <div 
                      key={method.id} 
                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                        selectedPaymentMethod === method.id 
                          ? 'border-indigo-500 bg-indigo-50' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => handleMethodSelect(method.id)}
                    >
                      <div className="flex items-center space-x-3">
                        <Icon name={method.icon as any} size={24} className="text-gray-600" />
                        <div className="flex-1">
                          <div className="font-medium">{method.name}</div>
                          <div className="text-sm text-gray-500">{method.description}</div>
                          {method.testCard && (
                            <div className="text-xs text-gray-400 mt-1">
                              –¢–µ—Å—Ç: {method.testCard}
                            </div>
                          )}
                        </div>
                        {selectedPaymentMethod === method.id && (
                          <Icon name="Check" size={20} className="text-indigo-600" />
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <Separator />

              <div>
                <h3 className="text-lg font-semibold mb-4">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="name">–ò–º—è *</Label>
                    <Input
                      id="name"
                      type="text"
                      placeholder="–í–∞—à–µ –∏–º—è"
                      value={contactInfo.name}
                      onChange={(e) => setContactInfo({...contactInfo, name: e.target.value})}
                      required
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="email">Email *</Label>
                    <Input
                      id="email"
                      type="email"
                      placeholder="example@mail.ru"
                      value={contactInfo.email}
                      onChange={(e) => setContactInfo({...contactInfo, email: e.target.value})}
                      required
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω *</Label>
                    <Input
                      id="phone"
                      type="tel"
                      placeholder="+7 (999) 123-45-67"
                      value={contactInfo.phone}
                      onChange={(e) => setContactInfo({...contactInfo, phone: e.target.value})}
                      required
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –°–≤–æ–¥–∫–∞ */}
            <div>
              <div className="bg-gradient-to-br from-indigo-50 to-emerald-50 rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4">–î–µ—Ç–∞–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</h3>
                
                <div className="space-y-4">
                  <div className="flex justify-between">
                    <span className="text-gray-600">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–Ω:</span>
                    <span className="font-medium">{selectedPlan.name}</span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-gray-600">–°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:</span>
                    <span className="font-bold">{amount.toLocaleString()} ‚ÇΩ</span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-gray-600">–ü–µ—Ä–∏–æ–¥:</span>
                    <span className="font-medium">{selectedPlan.duration} —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è</span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-gray-600">–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</span>
                    <span className="font-medium">{selectedPlan.dailyReturn}%</span>
                  </div>
                  
                  <Separator />
                  
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-gray-600">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥:</span>
                      <span className="font-medium text-emerald-600">+{returns.daily.toFixed(0)} ‚ÇΩ</span>
                    </div>
                    
                    <div className="flex justify-between">
                      <span className="text-gray-600">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                      <span className="font-medium text-emerald-600">+{returns.total.toFixed(0)} ‚ÇΩ</span>
                    </div>
                    
                    <div className="flex justify-between items-center pt-2 border-t">
                      <span className="font-semibold">–ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ:</span>
                      <span className="font-bold text-xl text-emerald-600">
                        {returns.final.toFixed(0)} ‚ÇΩ
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                  <div className="flex items-start space-x-2">
                    <Icon name="Shield" size={16} className="text-blue-600 mt-0.5" />
                    <div className="text-sm text-blue-800">
                      <p className="font-medium mb-1">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</p>
                      <ul className="space-y-1 text-xs">
                        <li>‚Ä¢ SSL —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</li>
                        <li>‚Ä¢ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</li>
                        <li>‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
              
              <Button 
                onClick={processPayment}
                disabled={isProcessing}
                className="w-full mt-6 bg-gradient-to-r from-indigo-600 to-emerald-600 hover:from-indigo-700 hover:to-emerald-700 text-lg py-6"
              >
                {isProcessing ? (
                  <>
                    <Icon name="Loader2" size={20} className="mr-2 animate-spin" />
                    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...
                  </>
                ) : (
                  <>
                    <Icon name="CreditCard" size={20} className="mr-2" />
                    –û–ø–ª–∞—Ç–∏—Ç—å {amount.toLocaleString()} ‚ÇΩ
                  </>
                )}
              </Button>
              
              <p className="text-xs text-gray-500 text-center mt-3">
                –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}